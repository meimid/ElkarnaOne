<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"    
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans     
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/data/jpa
           http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
          

       ">



 <context:annotation-config />
 <jpa:repositories base-package="com.meimid.core.repository" />
<context:component-scan base-package="com.meimid"/>


<bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">   
    <property name="location" value="classpath:databseH2R.properties"/>
</bean>
<bean id="resourceBundle"
      class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
      p:basename="classpath:locale/messages"
      p:cacheSeconds="5"
      p:defaultEncoding="UTF-8" />
      
 <bean id="dataSourcePooling" class="org.apache.commons.dbcp2.BasicDataSource"
        destroy-method="close"> 
        
  <property name="driverClassName" value="${database.driver}" />
    <!--<property name="url" value="jdbc:h2:~/database.db;DB_CLOSE_ON_EXIT=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS classified\;SET SCHEMA classified" />
  <property name="username" value="classified" />
  <property name="password" value="classified" />
 -->
  <property name="url" value="${user.url}" />
  <property name="username" value="${user.name}" />
  <property name="password" value="${user.password}" /> 
    <property name="initialSize" value="2" />
     <property name="maxTotal" value="2" />
      <property name="maxWaitMillis" value="5000" />
  

</bean>    
 
 
 
 
 
 
 
 
<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
    <property name="dataSource" ref="dataSourcePooling"/>  
    
</bean>

<tx:annotation-driven  transaction-manager="transactionManager"/>

<bean id="jpaAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
    <property name="databasePlatform" value="${hibernate.dialect}" />
    <property name="showSql" value="${hibernate.show_sql}" />
<!--     <property name="generateDdl" value="${hibernate.hbm2ddl.auto}" /> -->
</bean>

<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
            p:packagesToScan="com.meimid.core.model"
            p:dataSource-ref="dataSourcePooling">
            <property name="jpaVendorAdapter" ref="jpaAdapter" />
    <property name="jpaProperties">
        <props>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">true</prop>
             <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
        </props>
    </property>
       
    </bean>

<!-- 
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSourcePooling"/>
     <property name="packagesToScan" value="com.meimid" />
    <property name="hibernateProperties">
      <value>
        hibernate.show_sq=${hibernate.show_sql}  
        hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
        hibernate.dialect=${hibernate.dialect}
        hibernate.connection.useUnicode=true
        hibernate.connection.characterEncoding="UTF-8"
        hibernate.connection.charSet="UTF-8"
      
      hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
      
        hibernate.cache.region.factory_class=net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory
   -->
    <!--
    hibernate.cache.provider_class= org.hibernate.cache.EhCacheProvider  
      -->
        <!-- For singleton factory -->
        <!-- <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</property>
         -->
          
         <!-- enable second level cache and query cache hibernate.cache.provider_configuration_file_resource_path=myehcache.xml
      
       hibernate.cache.use_second_level_cache=true
       hibernate.cache.use_query_cache=true -->
       <!--   net.sf.ehcache.configurationResourceName=myehcache.xml 
    hibernate.cache.provider_configuration_file_resource_path=myehcache.xml
       net.sf.ehcache.configurationResourceName
       hibernate.generate_statistics=true 
         </value>
    </property>
  </bean>
       
       -->
                  
    
  
  <!--  <bean class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start" destroy-method="stop">
    <constructor-arg>
        <array>
            <value>-tcp</value>
            <value>-tcpAllowOthers</value>
            <value>-tcpPort</value>
            <value>8045</value>
        </array>
    </constructor-arg>
</bean>
 
 
 <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">   
         <property name="configLocation" value="classpath:myehcache.xml" />    
    </bean> 
    -->
</beans>
